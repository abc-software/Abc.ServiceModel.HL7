// ----------------------------------------------------------------------------
// <copyright file="HL7QueryByParameterPayloadSerializerDefaults.cs" company="PlaceholderCompany">
// Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------

namespace Abc.ServiceModel.Protocol.HL7
{
    using System;
    using System.Runtime.Serialization;
    using System.Xml.Linq;
    using System.Xml.Serialization;

    /// <summary>
    /// Create HL7Subject serializer.
    /// </summary>
    internal static class HL7QueryByParameterPayloadSerializerDefaults
    {
        /// <summary>
        /// The ignore extension data object
        /// </summary>
        internal const bool IgnoreExtensionDataObject = false;

        /// <summary>
        /// The maximum items in object graph
        /// </summary>
        internal const int MaxItemsInObjectGraph = 0x10000;

        /// <summary>
        /// Creates the serializer.
        /// </summary>
        /// <param name="serializerType">The serializer type.</param>
        /// <param name="type">The type.</param>
        /// <returns>The HL7 Subject serializer.</returns>
        internal static XmlObjectSerializer CreateSerializer(Type serializerType, Type type)
        {
            if (serializerType == typeof(XElementObjectSerializer))
            {
                return new XElementObjectSerializer(HL7Constants.Elements.QueryByParameterPayload, HL7Constants.Namespace);
            }

            // if (serializerType == typeof(QuerySerializer))
            // {
            //    return new QuerySerializer();
            // }
            return (XmlObjectSerializer)Activator.CreateInstance(serializerType, type, HL7Constants.Elements.QueryByParameterPayload, HL7Constants.Namespace);
        }

        /// <summary>
        /// Creates the serializer.
        /// </summary>
        /// <param name="type">The type.</param>
        /// <returns>The HL7 Subject serializer.</returns>
        internal static XmlObjectSerializer CreateSerializer(Type type)
        {
            // Generated by XSD tools
            if (type.GetCustomAttributes(typeof(XmlTypeAttribute), true).Length > 0)
            {
                return new XmlSerializerObjectSerializer(type, HL7Constants.Elements.QueryByParameterPayload, HL7Constants.Namespace);
            }

            if (type == typeof(XElement))
            {
                return new XElementObjectSerializer(HL7Constants.Elements.QueryByParameterPayload, HL7Constants.Namespace);
            }

            return new DataContractSerializer(type, HL7Constants.Elements.QueryByParameterPayload, HL7Constants.Namespace);
        }
    }
}